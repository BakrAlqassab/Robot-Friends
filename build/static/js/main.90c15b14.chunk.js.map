{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","Scroll/Scroll.js","ErrorHandling/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","id","name","email","className","alt","src","CardList","robots","cardsArray","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","width","Component","App","onSearchChange","event","searchField","target","value","fetch","response","json","users","filterdRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mDCaCQ,MAjBf,SAAcC,GAAO,IAEZC,EAAiBD,EAAjBC,GAAGC,EAAcF,EAAdE,KAAKC,EAASH,EAATG,MACf,OACE,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,gCACA,6BAAKC,IACL,4BAAIC,WCGMI,MAXf,YAA+B,IAAXC,EAAU,EAAVA,OACZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OAEE,aADE,CACD,EAAD,CAAyBX,GAAKO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,OAAxEK,EAAOI,GAAGX,OAIzB,OAAO,8BAAMQ,KCGAI,MAZf,YAAoC,IAAhBC,EAAe,EAAfA,aAClB,OACE,qBAAKV,UAAU,MAAf,SACE,uBAAOA,UAAU,mCAChBW,KAAK,SAASC,YAAY,gBAC1BC,SAAWH,OCSHI,MAff,SAAgBlB,GACd,OACE,qBACEmB,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGtB,EAAMuB,YCiBEC,E,kDAxBb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAE5B,WACE,OAAIG,KAAKJ,MAAMC,SAEX,gCACE,4DACA,qBAAKrB,IAAI,SAASc,MAAO,CAACY,MAAM,QAAST,OAAO,SAAWhB,IAAI,iBAK9DuB,KAAK7B,MAAMuB,a,GArBKS,aC0DZC,G,wDAnDb,aAAe,IAAD,8BACZ,gBAqBFC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SArB1C,EAAKb,MAAQ,CACXjB,OAAQ,GACR4B,YAAa,IAJH,E,sDAQd,c,+BAIA,WAAqB,IAAD,OAElBG,MAAM,8CACH9C,MAAK,SAAC+C,GACL,OAAOA,EAASC,UAEjBhD,MAAK,SAACiD,GACL,EAAKZ,SAAS,CAAEtB,OAAQkC,S,oBAO9B,WAAU,IAAD,EACyBb,KAAKJ,MAA7BjB,EADD,EACCA,OAAQ4B,EADT,EACSA,YACVO,EAAgBnC,EAAOoC,QAAO,SAACC,GACnC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASX,EAAYU,kBAGvD,OAAKtC,EAAOwC,OAIR,sBAAK5C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,2BAEA,cAAC,EAAD,CAAWU,aAAce,KAAKK,iBAC9B,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAU1B,OAAQmC,IADpB,YARC,mD,GAlCKX,cCClBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.90c15b14.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport \"./Card.css\";\r\n\r\nfunction Card(props) {\r\n  // function Card({id,name,email}) {\r\n  const {id,name,email} = props;\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n     <img alt='robots' src={`https://robohash.org/${id}?200*200`}/>\r\n     <div>\r\n     <h2>{name}</h2>\r\n     <p>{email}</p>\r\n     </div>\r\n     \r\n     \r\n     \r\n         </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n// import { robots } from \"./Data/robots\";\r\nfunction CardList({ robots }) {\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n        // The key should be unique not change constantly\r\n      <Card key={robots[i].id} id={ robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    );\r\n  });\r\n\r\n  return <div>{cardsArray}</div>;\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nfunction SearchBox({searchChange}) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input className='pa3 ba b--green bg-lightest-blue'\r\n       type=\"search\" placeholder=\"Search Robots\"\r\n       onChange= {searchChange}\r\n       \r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nfunction Scroll(props) {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"3px solid black\",\r\n        height: \"565px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n      {/* <h1> Heippa</h1> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div >\r\n          <h1> Ooops Someting went Wring</h1>\r\n          <img alt=\"robots\" style={{width:'35rem' ,height:'32rem'}}  src=\"error.png\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../Scroll/Scroll\";\r\nimport ErrorBoundry from \"../ErrorHandling/ErrorBoundry\";\r\n// import { robots } from \"./Data/robots\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // implementing after render\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.setState({robots:robots})\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((users) => {\r\n        this.setState({ robots: users });\r\n      });\r\n  }\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n  // function App() {\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const filterdRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    if (!robots.length) {\r\n      return <h1> Loading ....</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">Robot Friends</h1>\r\n\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filterdRobots} />;\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"tachyons\";\r\n\r\nimport App from \"./containers/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div>\r\n      <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}